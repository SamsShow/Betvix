// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Markets created on-chain
model Market {
  id          Int      @id @default(autoincrement())
  chain       String   // "base" or "aptos"
  address     String   // On-chain address
  marketId    Int      // On-chain market ID
  statement   String
  category    String?
  deadline    DateTime
  status      String   // "Open", "AwaitingResolution", "ResolvedYes", "ResolvedNo", "Invalid", "Paused"
  resolver    String   // Resolver address
  criteriaURI String
  sourceURL   String?
  veracity    String?  // "verified", "unverified"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  capsule      Capsule?
  poolSnapshots PoolSnapshot[]
  bets          Bet[]

  @@unique([chain, address, marketId])
}

// News capsules for markets
model Capsule {
  id        Int      @id @default(autoincrement())
  marketId  Int      @unique
  title     String
  line1     String
  line2     String?
  tags      String[] @default([])
  language  String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  market Market @relation(fields: [marketId], references: [id])
}

// Historical snapshots of liquidity pools
model PoolSnapshot {
  id        Int      @id @default(autoincrement())
  marketId  Int
  yesUSD    Decimal  @db.Decimal(18, 6)
  noUSD     Decimal  @db.Decimal(18, 6)
  timestamp DateTime @default(now())

  market Market @relation(fields: [marketId], references: [id])

  @@index([marketId, timestamp])
}

// User bets
model Bet {
  id         Int      @id @default(autoincrement())
  wallet     String
  chain      String
  marketId   Int
  side       String   // "yes" or "no"
  stake      Decimal  @db.Decimal(18, 6)
  entryOdds  Decimal  @db.Decimal(18, 6)
  txHash     String
  timestamp  DateTime @default(now())

  market Market @relation(fields: [marketId], references: [id])

  @@index([wallet, chain])
  @@index([marketId])
}

// User notifications
model Notification {
  id        Int       @id @default(autoincrement())
  wallet    String
  type      String
  payload   Json
  sentAt    DateTime  @default(now())
  readAt    DateTime?

  @@index([wallet, sentAt])
}

// Moderation queue for market creation
model ModerationQueue {
  id        Int       @id @default(autoincrement())
  payload   Json
  reviewer  String?
  decision  String?   // "approved", "rejected"
  reason    String?
  timestamp DateTime  @default(now())
}
